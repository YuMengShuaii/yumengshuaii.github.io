[{"title":"基于Retrofit,RxJava,RxAndroid,OkHttp3,Gson网络请求框架封装","date":"2017-03-31T02:07:39.000Z","path":"2017/03/31/6/","text":"拦截器（Interceptor）维护Cookies本地存储Cookies（ReceivedInterceptor）1234567891011121314151617181920212223242526272829303132@Override public Response intercept(Chain chain) throws IOException &#123; //获取到Repanse Response originalResponse = chain.proceed(chain.request()); //这里获取请求返回的cookie if (!originalResponse.headers(&quot;Set-Cookie&quot;).isEmpty()) &#123; //设置一个StringBuffer，用来存储Cookies final StringBuffer cookieBuffer = new StringBuffer(); //使用Rxjava方法map过滤出来Cookies Observable.from(originalResponse.headers(&quot;Set-Cookie&quot;)) .map(new Func1&lt;String, String&gt;() &#123; @Override public String call(String s) &#123; String[] cookieArray = s.split(&quot;;&quot;); return cookieArray[0]; &#125; &#125;) .subscribe(new Action1&lt;String&gt;() &#123; @Override public void call(String cookie) &#123; cookieBuffer.append(cookie).append(&quot;;&quot;); &#125; &#125;); //获取SharePreferences对象 SharedPreferences sharedPreferences =context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE); //开启编辑模式 SharedPreferences.Editor editor = sharedPreferences.edit(); //把Cookies存储起来 editor.putString(&quot;cookie&quot;, cookieBuffer.toString()); //提交操作 editor.commit(); &#125; 完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * 存储Cookies拦截器 */public class ReceivedInterceptor implements Interceptor &#123; private Context context; public ReceivedInterceptor(Context context) &#123; super(); this.context = context; &#125; @Override public Response intercept(Chain chain) throws IOException &#123; //获取到Repanse Response originalResponse = chain.proceed(chain.request()); //这里获取请求返回的cookie if (!originalResponse.headers(&quot;Set-Cookie&quot;).isEmpty()) &#123; //设置一个StringBuffer，用来存储Cookies final StringBuffer cookieBuffer = new StringBuffer(); //使用Rxjava方法map过滤出来Cookies Observable.from(originalResponse.headers(&quot;Set-Cookie&quot;)) .map(new Func1&lt;String, String&gt;() &#123; @Override public String call(String s) &#123; String[] cookieArray = s.split(&quot;;&quot;); return cookieArray[0]; &#125; &#125;) .subscribe(new Action1&lt;String&gt;() &#123; @Override public void call(String cookie) &#123; cookieBuffer.append(cookie).append(&quot;;&quot;); &#125; &#125;); //获取SharePreferences对象 SharedPreferences sharedPreferences =context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE); //开启编辑模式 SharedPreferences.Editor editor = sharedPreferences.edit(); //把Cookies存储起来 editor.putString(&quot;cookie&quot;, cookieBuffer.toString()); //提交操作 editor.commit(); &#125; return originalResponse; &#125;&#125; 往请求头添加Cookies（AddCookiesInterceptor）12345678910111213141516171819202122/** * 拦截方法 * @param chain 请求链 * @return * @throws IOException */public Response intercept(Chain chain) throws IOException &#123; //得到Buider对象 final Builder builder = chain.request().newBuilder(); //获取SharePreferences SharedPreferences sharedPreferences = context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE); //获取本地存储的cookies Observable.just(sharedPreferences.getString(&quot;cookie&quot;, &quot;&quot;)) .subscribe(new Action1&lt;String&gt;() &#123; @Override public void call(String cookie) &#123; //添加cookies到请求头 builder.addHeader(&quot;Cookie&quot;, cookie); &#125; &#125;); return chain.proceed(builder.build());&#125; 完整代码1234567891011121314151617181920212223242526272829303132333435363738394041/** * 往请求头添加Cookies */public class AddCookiesInterceptor implements Interceptor &#123; /** * 上下文 */ private Context context; /** * 传递上下文 * @param context 上下文 */ public AddCookiesInterceptor(Context context) &#123; this.context =context; &#125; /** * 拦截方法 * @param chain 请求链 * @return * @throws IOException */ public Response intercept(Chain chain) throws IOException &#123; //得到Buider对象 final Builder builder = chain.request().newBuilder(); //获取SharePreferences SharedPreferences sharedPreferences = context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE); //获取本地存储的cookies Observable.just(sharedPreferences.getString(&quot;cookie&quot;, &quot;&quot;)) .subscribe(new Action1&lt;String&gt;() &#123; @Override public void call(String cookie) &#123; //添加cookies到请求头 builder.addHeader(&quot;Cookie&quot;, cookie); &#125; &#125;); return chain.proceed(builder.build()); &#125;&#125; 下载进度监听（ProgressInterceptor）12345678910111213/** * @param chain 数据链 * @return * @throws IOException */ @Override public Response intercept(Interceptor.Chain chain) throws IOException &#123; //从数据链中获取Respose Response originalResponse = chain.proceed(chain.request()); //使用集成Respone return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),progressListener)).build(); &#125; 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103/** * 下载进度监听拦截器 */public class ProgressInterceptor implements Interceptor&#123; /** * 下载进度监听接口 */ private NetServiceFactory.ProgressLisener progressListener; /** * 构造方法 传递监听接口 * @param progressListener 监听接口 */ public ProgressInterceptor(NetServiceFactory.ProgressLisener progressListener) &#123; this.progressListener = progressListener; &#125; /** * @param chain 数据链 * @return * @throws IOException */ @Override public Response intercept(Interceptor.Chain chain) throws IOException &#123; //从数据链中获取Respose Response originalResponse = chain.proceed(chain.request()); //使用集成Respone return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),progressListener)).build(); &#125;&#125;/** * 监听下载进度的自定义ResponseBody */public class ProgressResponseBody extends ResponseBody&#123; /** * 用来计算下载进度的ResponseBody */ private final ResponseBody responseBody; /** * 监听接口 */ private final NetServiceFactory.ProgressLisener progressListener; /** * */ private BufferedSource bufferedSource; public ProgressResponseBody(ResponseBody responseBody,NetServiceFactory.ProgressLisener lisener)&#123; this.responseBody = responseBody; this.progressListener = lisener; &#125; @Override public MediaType contentType() &#123; return responseBody.contentType(); &#125; @Override public long contentLength() &#123; return responseBody.contentLength(); &#125; @Override public BufferedSource source() &#123; if(bufferedSource == null) &#123; //构建文件缓冲源 bufferedSource = Okio.buffer(source(responseBody.source())); &#125; return bufferedSource; &#125; private Source source(Source source) &#123; return new ForwardingSource(source) &#123; //已经下载的总大小 long totalBytesRead = 0L; //读取下载byte @Override public long read(Buffer sink, long byteCount) throws IOException &#123; //获取单次读取的长度 long bytesRead = super.read(sink, byteCount); //计算总的下载长度 totalBytesRead += bytesRead != -1 ? bytesRead : 0; //设置监听 if (progressListener!=null)&#123; progressListener.prigress(totalBytesRead,responseBody.contentLength(),bytesRead == -1); &#125; return bytesRead; &#125; &#125;; &#125;&#125; RxJava线程处理工具类123456789101112131415161718192021222324252627282930public class ThreadFromUtils&#123; /** * 默认线程 处理数据在io线程 ，接收数据后的处理在主线程 * @param &lt;T&gt; Gson转换处理的泛型类 * @return */ public static &lt;T&gt; Transformer&lt;T, T&gt; defaultSchedulers() &#123; return new Transformer&lt;T, T&gt;() &#123; @Override public Observable&lt;T&gt; call(Observable&lt;T&gt; tObservable) &#123; return tObservable.observeOn(AndroidSchedulers.mainThread()).subscribeOn(Schedulers.io()); &#125; &#125;; &#125; /** * 全部在Io线程 * @param &lt;T&gt; Gson转换处理的泛型类 * @return */ public static &lt;T&gt; Transformer&lt;T, T&gt; all_io() &#123; return new Transformer&lt;T, T&gt;() &#123; @Override public Observable&lt;T&gt; call(Observable&lt;T&gt; tObservable) &#123; return tObservable.observeOn(Schedulers.io()).subscribeOn(Schedulers.io()); &#125; &#125;; &#125;&#125; 网络Service对象的构建首先配置OkhttpClint配置下载进度监听器的方法12345678910111213141516171819//ProgressLisener 是下载进度监听器，下面会介绍到private OkHttpClient getOkHttpClient(Context context,ProgressLisener lisener) &#123; //定制OkHttp OkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder(); //设置拦截器 httpClientBuilder.addInterceptor(new ReceivedInterceptor(context)).addInterceptor(new AddCookiesInterceptor(context)).addInterceptor(new ProgressInterceptor(lisener)); //设置连接超时时间 我设置的默认超时事件是10秒 这里单位是秒 httpClientBuilder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS); //设置写超时时间 httpClientBuilder.writeTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS); //设置读超时时间 httpClientBuilder.readTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS); //设置缓存位置，名称 File httpCacheDirectory = new File(context.getCacheDir(), &quot;OkHttpCache&quot;); //设置缓存大小 httpClientBuilder.cache(new Cache(httpCacheDirectory, 10 * 1024 * 1024)); //返回配置完成的OkhttpClint return httpClientBuilder.build(); &#125; 重载不用配置下载监听的方法123456789101112131415161718private OkHttpClient getOkHttpClient(Context context) &#123; return getOkHttpClient(context,null); &#125;``` #### 构造Gson对象``` private final Gson mGsonDateFormat; public NetServiceFactory() &#123; mGsonDateFormat = new GsonBuilder() .setDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;) .create(); &#125; 下载监听接口12345public interface ProgressLisener&#123; void prigress(long read,long count,boolean isOver); &#125; 通过Retrofit构造Service对象12345678910111213141516171819202122//serviceClass 网络访问接口 context 用户上下文，如果APP全局静态访问的话，使用ApplicarionContext，其他传ActivityContex就可以了，lisener 下载监听接口 public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl,ProgressLisener lisener) &#123; //设置一个线程池，线程池最大运行5个任务 ExecutorService executorService = Executors.newFixedThreadPool(5); Retrofit retrofit = new Retrofit.Builder() //服务器BaseUrl .baseUrl(baseurl) //配置OkhttpClint .client(getOkHttpClient(context,lisener)) //设置callback线程池 .callbackExecutor(executorService) //添加Gson适配器，直接把Json字符串解析成对象 .addConverterFactory(GsonConverterFactory.create(mGsonDateFormat)) //添加RxJava适配器，让整个网络访问流程呈现函数式操作 .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .build(); return retrofit.create(serviceClass); &#125; //重载不配置下载监听的方法 public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl) &#123; return createService(serviceClass,context,baseurl,null); &#125; 把整个类单例123456private static class SingletonHolder &#123; private static final NetServiceFactory INSTANCE = new NetServiceFactory(); &#125;public static NetServiceFactory getInstance() &#123; return SingletonHolder.INSTANCE; &#125; 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121/** * Retrofit网络服务构造类 */public class NetServiceFactory &#123; /** * 默认超时时间 */ private final static long DEFAULT_TIMEOUT = 10; /** * Gson对象 */ private final Gson mGsonDateFormat; /** * 构造方法，初始化Gson对象 */ public NetServiceFactory() &#123; mGsonDateFormat = new GsonBuilder() .setDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;) .create(); &#125; /** * 静态化该类对象 */ private static class SingletonHolder &#123; private static final NetServiceFactory INSTANCE = new NetServiceFactory(); &#125; /** * 获取队里对象 * @return 网络服务对象 */ public static NetServiceFactory getInstance() &#123; return SingletonHolder.INSTANCE; &#125; /** * 构造网络服务Service 此方法需要配置下载监听接口，如不需要请调另外的重载方法！ * @param serviceClass API接口 * @param context 上下文 * @param baseurl 服务器BaseUrl * @param lisener 下载进度监听 * @param &lt;S&gt; 返回服务对象 * @return 服务接口 */ public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl,ProgressLisener lisener) &#123; //创建CallBack线程池，最大值为5 ExecutorService executorService = Executors.newFixedThreadPool(5); //构建Retrofit对象 Retrofit retrofit = new Retrofit.Builder() //服务器BaseUrl .baseUrl(baseurl) //配置OkHttpClint .client(getOkHttpClient(context,lisener)) //配置回调线程池 .callbackExecutor(executorService) //添加Gson解析 .addConverterFactory(GsonConverterFactory.create(mGsonDateFormat)) //添加RxJava函数式变成 .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .build(); //把接口注册到Retrofit中 return retrofit.create(serviceClass); &#125; /** * 构造网络服务Service * @param serviceClass API接口 * @param context 上下文 * @param baseurl 服务器BaseUrl * @param &lt;S&gt; 返回服务对象 * @return API服务接口 */ public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl) &#123; return createService(serviceClass,context,baseurl,null); &#125; /** * 配置OkHttpClint 此方法需要配置下载进度监听接口 如不需要 请调用其他重载方法 * @param context 用户上下文 * @param lisener 下载进度1监听接口 * @return okHttpClint对象 */ private OkHttpClient getOkHttpClient(Context context,ProgressLisener lisener) &#123; //定制OkHttp OkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder(); //添加拦截器，维护Cookies，设置下载进度监听监听器 httpClientBuilder.addInterceptor(new ReceivedInterceptor(context)).addInterceptor(new AddCookiesInterceptor(context)).addInterceptor(new ProgressInterceptor(lisener)); //设置连接超时时间 httpClientBuilder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS); //设置写超时时间 httpClientBuilder.writeTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS); //设置读超时时间 httpClientBuilder.readTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS); //设置缓存路径 名称 File httpCacheDirectory = new File(context.getCacheDir(), &quot;OkHttpCache&quot;); //设置缓存大小 httpClientBuilder.cache(new Cache(httpCacheDirectory, 10 * 1024 * 1024)); return httpClientBuilder.build(); &#125; /** * 配置OkHttp 此方法不用配置下载监听接口 * @param context 上下文 * @return OkHttpClint对象 */ private OkHttpClient getOkHttpClient(Context context) &#123; return getOkHttpClient(context,null); &#125; /** * 下载监听接口 */ public interface ProgressLisener&#123; void prigress(long read,long count,boolean isOver); &#125;&#125; 数据获取封装处理观察者并获取数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * 处理Retrofit注册后的Observable * @param observable api观察者 例如 api.login(&quot;user&quot;,&quot;111&quot;); * @param getData 数据获取接口 * @param OutType 自定义线程处理 * @param &lt;T&gt; Json字符串转换的类 必须继承BaseData 这样才可以进行错误处理 */public static &lt;T extends BaseData&gt; void RxGet(Observable&lt;T&gt; observable, final RxDataListener&lt;T&gt; getData, Observable.Transformer&lt;T, T&gt; OutType)&#123; //线程处理 observable.compose(OutType) //结果回调 .subscribe(new Observer&lt;T&gt;() &#123; @Override public void onCompleted() &#123; &#125; //错误处理 @Override public void onError(Throwable paramThrowable) &#123; if ((paramThrowable instanceof SocketTimeoutException) || (paramThrowable.getMessage().contains(&quot;Failed&quot;)) || (paramThrowable.getMessage().contains(&quot;502&quot;)) || (paramThrowable.getMessage().contains(&quot;404&quot;)))&#123; Utils.ToastS(&quot;网络故障！&quot;); &#125; getData.failed(paramThrowable); &#125; //错误处理，返回结果！ @Override public void onNext(T o) &#123; if (o.getResult()==1)&#123; getData.success(o); &#125;else&#123; getData.failed(new Throwable(&quot;获取数据失败！原因：&quot;+o.getMessage())); &#125; &#125; &#125;);&#125;/** * 处理Retrofit注册后的Observable 该类不需要传递线程处理参数，使用默认线程参数 observaon(Mian) subscribeOn(IO) * @param observable API观察者 * @param rxLisener 数据监听接口 * @param &lt;T&gt; Json字符串转换的类 必须继承BaseData 这样才可以进行错误处理 */public static &lt;T extends BaseData&gt; void RxGet(Observable&lt;T&gt; observable, final RxDataListener&lt;T&gt; rxLisener)&#123; RxGet(observable,rxLisener,ThreadFromUtils.&lt;T&gt;defaultSchedulers());&#125; 数据获取接口12345678/** * 数据获取接口 * @param &lt;T&gt; Gson解析类 */public interface RxDataListener&lt; T extends BaseData&gt;&#123; void success(T data); void failed(Throwable e);&#125; BaseData1234567public abstract class BaseData &#123; public abstract String getMessage(); public abstract int getResult();&#125; 下载文件封装封装下载文件服务接口，封装处理下载文件观察者操作12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * 下载文件方法，带进度监听功能 * @param tClass 下载service接口 * @param activity 调用者Activity * @param listener 进度监听 * @param &lt;S&gt; service接口 * @return 注册成功的service接口 */public static &lt;S&gt; S DownFile(Class&lt;S&gt; tClass, final Activity activity, final DownloadListener listener)&#123; return NetServiceFactory.getInstance().createService(tClass, activity.getApplicationContext(), &quot;http://onghqryqs.bkt.clouddn.com/apk/&quot;, new NetServiceFactory.ProgressLisener() &#123; @Override public void prigress(final long read, final long count, final boolean isOver) &#123; //让接收数据后的操作在主线程运行 activity.runOnUiThread(new Runnable() &#123; @Override public void run() &#123; //传递进度参数 listener.listener(read,count,isOver); &#125; &#125;); &#125; &#125;);&#125;/** * 执行下载操作 并写入本地 * @param observable 观察者 * @param downLoadManager 写入本地操作接口，本地有实现类，可以实现该类自定义本地操作接口！ */public static void RxDownLoad(Observable&lt;ResponseBody&gt; observable , final BaseDownLoadManager downLoadManager)&#123; observable .compose(ThreadFromUtils.&lt;ResponseBody&gt;all_io()) .subscribe(new Observer&lt;ResponseBody&gt;() &#123; @Override public void onCompleted() &#123; &#125; @Override public void onError(Throwable e) &#123; Log.e(&quot;RxUtils下载文件异常&quot;,e.getMessage()); Utils.ToastL(&quot;RxUtils下载文件异常&quot;+e.getMessage()); &#125; @Override public void onNext(ResponseBody response) &#123; downLoadManager.writeResponseBodyToDisk(FrameInit.Mcontext.getApplicationContext(), response); &#125; &#125;);&#125;/** * 执行下载操作 并写入本地 采用已经实现的 DownLoadManager 进行写入本地操作 * @param observable 观察者 */public static void RxDownLoad(Observable&lt;ResponseBody&gt; observable)&#123; RxDownLoad(observable,new DownLoadManager());&#125; 下载进度传递接口123456/** * 下载进度传递接口 */public interface DownloadListener&#123; void listener(long read,long count,boolean isOver);&#125; 本地写入接口123public interface BaseDownLoadManager &#123; boolean writeResponseBodyToDisk(Context context, ResponseBody body);&#125; 内置的已经实现接口的本地写入工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133/** * 本地写入工具类 */public class DownLoadManager implements BaseDownLoadManager &#123; /** * Log TAG信息 */ public static final String TAG = &quot;DownLoadManager&quot;; /** * APK contentType */ public static String APK_CONTENTTYPE = &quot;application/octet-stream&quot;; /** * APK contentType */ public static String APK_CONTENTTYPE2 = &quot;application/vnd.android.package-archive&quot;; /** * png contentType */ public static String PNG_CONTENTTYPE = &quot;image/png&quot;; /** * jpg contentType */ public static String JPG_CONTENTTYPE = &quot;image/jpg&quot;; /** * 文件后缀 */ public static String fileSuffix=&quot;&quot;; /** * 文件存储路径 */ private String path=null; /** * 使用无参构造方法 使用默认路径 默认文件名 */ public DownLoadManager() &#123; &#125; /** * 使用一参构造方法 自定义存储文件的路径 以及文件名 * @param path */ public DownLoadManager(String path) &#123; this.path = path; &#125; /** * 写入本地操作 * @param context 上下文 * @param body ResponseBody * @return 是否存储完成 */ public boolean writeResponseBodyToDisk(Context context, ResponseBody body) &#123; //记录文件类型 Log.d(TAG, &quot;contentType:&gt;&gt;&gt;&gt;&quot; + body.contentType().toString()); //如果路径为空则使用默认路径 if (path==null||path.equals(&quot;&quot;))&#123; String type = body.contentType().toString(); //判断文件类型使用相应后缀 if (type.equals(APK_CONTENTTYPE)||type.equals(APK_CONTENTTYPE2)) &#123; fileSuffix = &quot;.apk&quot;; &#125; else if (type.equals(PNG_CONTENTTYPE)) &#123; fileSuffix = &quot;.png&quot;; &#125; //生成最终path，默认在应用程序根目录 path = context.getExternalFilesDir(null) + File.separator + System.currentTimeMillis() + fileSuffix; &#125; //记录存储路径 Log.d(TAG, &quot;path:&gt;&gt;&gt;&gt;&quot; + path); try &#123; //根据路径生成file File file = new File(path); InputStream inputStream = null; OutputStream outputStream = null; try &#123; //一次写入4096 byte[] fileReader = new byte[4096]; inputStream = body.byteStream(); outputStream = new FileOutputStream(file); while (true) &#123; int read = inputStream.read(fileReader); if (read == -1) &#123; break; &#125; outputStream.write(fileReader, 0, read); &#125; outputStream.flush(); return true; &#125; catch (IOException e) &#123; return false; &#125; finally &#123; if (inputStream != null) &#123; inputStream.close(); &#125; if (outputStream != null) &#123; outputStream.close(); &#125; &#125; &#125; catch (IOException e) &#123; return false; &#125; &#125;&#125; 使用示例 API接口： 123456public interface apiservice &#123; @GET(&quot;cat.json&quot;) Observable&lt;catModel&gt; getCat(); &#125; 普通接口访问具体示例 1234567891011RxDataUtils.RxGet(api.getCat(), new RxDataUtils.RxDataListener&lt;catModel&gt;() &#123; @Override public void success(catModel data) &#123; &#125; @Override public void failed(Throwable e) &#123; &#125; &#125;); 文件下载具体示例 12345//下载服务接口public interface down &#123; @GET(&quot;w.apk&quot;) Observable&lt;ResponseBody&gt; DownFile();&#125; 1234567//采用默认路径RxDataUtils.RxDownLoad( RxDataUtils.DownFile(down.class, activity, new RxDataUtils.DownloadListener() &#123; @Override public void listener(long read, long count, boolean isOver) &#123; //进度监听 &#125; &#125;).DownFile()); 1234567//自定义下载路径 当然也可以实现BaseDownLoadManager接口自定义本地序列化RxDataUtils.RxDownLoad( RxDataUtils.DownFile(down.class, activity, new RxDataUtils.DownloadListener() &#123; @Override public void listener(long read, long count, boolean isOver) &#123; &#125; &#125;).DownFile(),new DownLoadManager(&quot;xxx/xxx/xxx/aaa.apk&quot;));","content":"<h2 id=\"拦截器（Interceptor）\"><a href=\"#拦截器（Interceptor）\" class=\"headerlink\" title=\"拦截器（Interceptor）\"></a>拦截器（Interceptor）</h2><h4 id=\"维护Cookies\"><a href=\"#维护Cookies\" class=\"headerlink\" title=\"维护Cookies\"></a>维护Cookies</h4><h5 id=\"本地存储Cookies（ReceivedInterceptor）\"><a href=\"#本地存储Cookies（ReceivedInterceptor）\" class=\"headerlink\" title=\"本地存储Cookies（ReceivedInterceptor）\"></a>本地存储Cookies（ReceivedInterceptor）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">    public Response intercept(Chain chain) throws IOException &#123;</div><div class=\"line\">        //获取到Repanse</div><div class=\"line\">        Response originalResponse = chain.proceed(chain.request());</div><div class=\"line\">        //这里获取请求返回的cookie</div><div class=\"line\">        if (!originalResponse.headers(&quot;Set-Cookie&quot;).isEmpty()) &#123;</div><div class=\"line\">            //设置一个StringBuffer，用来存储Cookies</div><div class=\"line\">            final StringBuffer cookieBuffer = new StringBuffer();</div><div class=\"line\">            //使用Rxjava方法map过滤出来Cookies</div><div class=\"line\">            Observable.from(originalResponse.headers(&quot;Set-Cookie&quot;))</div><div class=\"line\">                    .map(new Func1&lt;String, String&gt;() &#123;</div><div class=\"line\">                        @Override</div><div class=\"line\">                        public String call(String s) &#123;</div><div class=\"line\">                            String[] cookieArray = s.split(&quot;;&quot;);</div><div class=\"line\">                            return cookieArray[0];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                    .subscribe(new Action1&lt;String&gt;() &#123;</div><div class=\"line\">                        @Override</div><div class=\"line\">                        public void call(String cookie) &#123;</div><div class=\"line\">                            cookieBuffer.append(cookie).append(&quot;;&quot;);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">            //获取SharePreferences对象</div><div class=\"line\">            SharedPreferences sharedPreferences =context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE);</div><div class=\"line\">            //开启编辑模式</div><div class=\"line\">            SharedPreferences.Editor editor = sharedPreferences.edit();</div><div class=\"line\">            //把Cookies存储起来</div><div class=\"line\">            editor.putString(&quot;cookie&quot;, cookieBuffer.toString());</div><div class=\"line\">            //提交操作</div><div class=\"line\">            editor.commit();</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h6 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 存储Cookies拦截器</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class ReceivedInterceptor implements Interceptor &#123;</div><div class=\"line\"></div><div class=\"line\">    private Context context;</div><div class=\"line\"></div><div class=\"line\">    public ReceivedInterceptor(Context context) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.context = context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Response intercept(Chain chain) throws IOException &#123;</div><div class=\"line\">        //获取到Repanse</div><div class=\"line\">        Response originalResponse = chain.proceed(chain.request());</div><div class=\"line\">        //这里获取请求返回的cookie</div><div class=\"line\">        if (!originalResponse.headers(&quot;Set-Cookie&quot;).isEmpty()) &#123;</div><div class=\"line\">            //设置一个StringBuffer，用来存储Cookies</div><div class=\"line\">            final StringBuffer cookieBuffer = new StringBuffer();</div><div class=\"line\">            //使用Rxjava方法map过滤出来Cookies</div><div class=\"line\">            Observable.from(originalResponse.headers(&quot;Set-Cookie&quot;))</div><div class=\"line\">                    .map(new Func1&lt;String, String&gt;() &#123;</div><div class=\"line\">                        @Override</div><div class=\"line\">                        public String call(String s) &#123;</div><div class=\"line\">                            String[] cookieArray = s.split(&quot;;&quot;);</div><div class=\"line\">                            return cookieArray[0];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                    .subscribe(new Action1&lt;String&gt;() &#123;</div><div class=\"line\">                        @Override</div><div class=\"line\">                        public void call(String cookie) &#123;</div><div class=\"line\">                            cookieBuffer.append(cookie).append(&quot;;&quot;);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;);</div><div class=\"line\">            //获取SharePreferences对象</div><div class=\"line\">            SharedPreferences sharedPreferences =context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE);</div><div class=\"line\">            //开启编辑模式</div><div class=\"line\">            SharedPreferences.Editor editor = sharedPreferences.edit();</div><div class=\"line\">            //把Cookies存储起来</div><div class=\"line\">            editor.putString(&quot;cookie&quot;, cookieBuffer.toString());</div><div class=\"line\">            //提交操作</div><div class=\"line\">            editor.commit();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return originalResponse;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"往请求头添加Cookies（AddCookiesInterceptor）\"><a href=\"#往请求头添加Cookies（AddCookiesInterceptor）\" class=\"headerlink\" title=\"往请求头添加Cookies（AddCookiesInterceptor）\"></a>往请求头添加Cookies（AddCookiesInterceptor）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 拦截方法</div><div class=\"line\"> * @param chain 请求链 </div><div class=\"line\"> * @return </div><div class=\"line\"> * @throws IOException</div><div class=\"line\"> */</div><div class=\"line\">public Response intercept(Chain chain) throws IOException &#123;</div><div class=\"line\">    //得到Buider对象</div><div class=\"line\">    final Builder builder = chain.request().newBuilder();</div><div class=\"line\">    //获取SharePreferences</div><div class=\"line\">    SharedPreferences sharedPreferences = context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE);</div><div class=\"line\">    //获取本地存储的cookies</div><div class=\"line\">    Observable.just(sharedPreferences.getString(&quot;cookie&quot;, &quot;&quot;))</div><div class=\"line\">            .subscribe(new Action1&lt;String&gt;() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void call(String cookie) &#123;</div><div class=\"line\">                    //添加cookies到请求头</div><div class=\"line\">                    builder.addHeader(&quot;Cookie&quot;, cookie);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">    return chain.proceed(builder.build());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 往请求头添加Cookies</div><div class=\"line\"> */</div><div class=\"line\">public class AddCookiesInterceptor implements Interceptor &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 上下文</div><div class=\"line\">     */</div><div class=\"line\">    private  Context context;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 传递上下文</div><div class=\"line\">     * @param context 上下文</div><div class=\"line\">     */</div><div class=\"line\">    public AddCookiesInterceptor(Context context)</div><div class=\"line\">    &#123;</div><div class=\"line\">        this.context =context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 拦截方法</div><div class=\"line\">     * @param chain 请求链</div><div class=\"line\">     * @return</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    public Response intercept(Chain chain) throws IOException &#123;</div><div class=\"line\">        //得到Buider对象</div><div class=\"line\">        final Builder builder = chain.request().newBuilder();</div><div class=\"line\">        //获取SharePreferences</div><div class=\"line\">        SharedPreferences sharedPreferences = context.getSharedPreferences(&quot;cookie&quot;, Context.MODE_PRIVATE);</div><div class=\"line\">        //获取本地存储的cookies</div><div class=\"line\">        Observable.just(sharedPreferences.getString(&quot;cookie&quot;, &quot;&quot;))</div><div class=\"line\">                .subscribe(new Action1&lt;String&gt;() &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    public void call(String cookie) &#123;</div><div class=\"line\">                        //添加cookies到请求头</div><div class=\"line\">                        builder.addHeader(&quot;Cookie&quot;, cookie);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">        return chain.proceed(builder.build());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"下载进度监听（ProgressInterceptor）\"><a href=\"#下载进度监听（ProgressInterceptor）\" class=\"headerlink\" title=\"下载进度监听（ProgressInterceptor）\"></a>下载进度监听（ProgressInterceptor）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">  * @param  chain 数据链</div><div class=\"line\">  * @return</div><div class=\"line\">  * @throws IOException</div><div class=\"line\">  */</div><div class=\"line\"> @Override</div><div class=\"line\"> public Response intercept(Interceptor.Chain chain) throws IOException</div><div class=\"line\"> &#123;</div><div class=\"line\">     //从数据链中获取Respose</div><div class=\"line\">     Response originalResponse = chain.proceed(chain.request());</div><div class=\"line\">     //使用集成Respone</div><div class=\"line\">     return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),progressListener)).build();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h6 id=\"完整代码-2\"><a href=\"#完整代码-2\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 下载进度监听拦截器</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class ProgressInterceptor implements Interceptor</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 下载进度监听接口</div><div class=\"line\">     */</div><div class=\"line\">     private NetServiceFactory.ProgressLisener progressListener;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 构造方法 传递监听接口</div><div class=\"line\">     * @param progressListener 监听接口</div><div class=\"line\">     */</div><div class=\"line\">    public ProgressInterceptor(NetServiceFactory.ProgressLisener progressListener)</div><div class=\"line\">    &#123;</div><div class=\"line\">        this.progressListener = progressListener;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param  chain 数据链</div><div class=\"line\">     * @return</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    @Override</div><div class=\"line\">    public Response intercept(Interceptor.Chain chain) throws IOException</div><div class=\"line\">    &#123;</div><div class=\"line\">        //从数据链中获取Respose</div><div class=\"line\">        Response originalResponse = chain.proceed(chain.request());</div><div class=\"line\">        //使用集成Respone</div><div class=\"line\">        return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(),progressListener)).build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 监听下载进度的自定义ResponseBody</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class ProgressResponseBody extends ResponseBody</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 用来计算下载进度的ResponseBody</div><div class=\"line\">     */</div><div class=\"line\">    private final ResponseBody responseBody;</div><div class=\"line\">    /**</div><div class=\"line\">     * 监听接口</div><div class=\"line\">     */</div><div class=\"line\">    private final NetServiceFactory.ProgressLisener progressListener;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     *</div><div class=\"line\">     */</div><div class=\"line\">    private BufferedSource bufferedSource;</div><div class=\"line\"></div><div class=\"line\">    public ProgressResponseBody(ResponseBody responseBody,NetServiceFactory.ProgressLisener lisener)&#123;</div><div class=\"line\">        this.responseBody = responseBody;</div><div class=\"line\">          this.progressListener = lisener;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public MediaType contentType()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return responseBody.contentType();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public long contentLength() &#123;</div><div class=\"line\">        return responseBody.contentLength();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public BufferedSource source()</div><div class=\"line\">    &#123;</div><div class=\"line\">        if(bufferedSource == null)</div><div class=\"line\">        &#123;</div><div class=\"line\">            //构建文件缓冲源</div><div class=\"line\">            bufferedSource = Okio.buffer(source(responseBody.source()));</div><div class=\"line\">        &#125;</div><div class=\"line\">        return bufferedSource;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private Source source(Source source) &#123;</div><div class=\"line\">        return new ForwardingSource(source) &#123;</div><div class=\"line\">            //已经下载的总大小</div><div class=\"line\">            long totalBytesRead = 0L;</div><div class=\"line\">            //读取下载byte</div><div class=\"line\">            @Override</div><div class=\"line\">            public long read(Buffer sink, long byteCount) throws IOException</div><div class=\"line\">            &#123;</div><div class=\"line\">                //获取单次读取的长度</div><div class=\"line\">                long bytesRead = super.read(sink, byteCount);</div><div class=\"line\">                //计算总的下载长度</div><div class=\"line\">                totalBytesRead += bytesRead != -1 ? bytesRead : 0;</div><div class=\"line\">                //设置监听</div><div class=\"line\">                if (progressListener!=null)&#123;</div><div class=\"line\">                    progressListener.prigress(totalBytesRead,responseBody.contentLength(),bytesRead == -1);</div><div class=\"line\">                &#125;</div><div class=\"line\">                return bytesRead;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"RxJava线程处理工具类\"><a href=\"#RxJava线程处理工具类\" class=\"headerlink\" title=\"RxJava线程处理工具类\"></a>RxJava线程处理工具类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ThreadFromUtils</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 默认线程 处理数据在io线程 ，接收数据后的处理在主线程</div><div class=\"line\">     * @param &lt;T&gt; Gson转换处理的泛型类</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static &lt;T&gt; Transformer&lt;T, T&gt; defaultSchedulers() &#123;</div><div class=\"line\">        return new Transformer&lt;T, T&gt;() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public Observable&lt;T&gt; call(Observable&lt;T&gt; tObservable) &#123;</div><div class=\"line\">                return tObservable.observeOn(AndroidSchedulers.mainThread()).subscribeOn(Schedulers.io());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 全部在Io线程</div><div class=\"line\">     * @param &lt;T&gt; Gson转换处理的泛型类</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public static &lt;T&gt; Transformer&lt;T, T&gt; all_io() &#123;</div><div class=\"line\">        return new Transformer&lt;T, T&gt;() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public Observable&lt;T&gt; call(Observable&lt;T&gt; tObservable) &#123;</div><div class=\"line\">                return tObservable.observeOn(Schedulers.io()).subscribeOn(Schedulers.io());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"网络Service对象的构建\"><a href=\"#网络Service对象的构建\" class=\"headerlink\" title=\"网络Service对象的构建\"></a>网络Service对象的构建</h2><h4 id=\"首先配置OkhttpClint\"><a href=\"#首先配置OkhttpClint\" class=\"headerlink\" title=\"首先配置OkhttpClint\"></a>首先配置OkhttpClint</h4><h5 id=\"配置下载进度监听器的方法\"><a href=\"#配置下载进度监听器的方法\" class=\"headerlink\" title=\"配置下载进度监听器的方法\"></a>配置下载进度监听器的方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">//ProgressLisener 是下载进度监听器，下面会介绍到</div><div class=\"line\">private OkHttpClient getOkHttpClient(Context context,ProgressLisener lisener) &#123;</div><div class=\"line\">        //定制OkHttp</div><div class=\"line\">        OkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder();</div><div class=\"line\">        //设置拦截器</div><div class=\"line\">        httpClientBuilder.addInterceptor(new ReceivedInterceptor(context)).addInterceptor(new AddCookiesInterceptor(context)).addInterceptor(new ProgressInterceptor(lisener));</div><div class=\"line\">        //设置连接超时时间 我设置的默认超时事件是10秒 这里单位是秒</div><div class=\"line\">        httpClientBuilder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</div><div class=\"line\">        //设置写超时时间</div><div class=\"line\">        httpClientBuilder.writeTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</div><div class=\"line\">        //设置读超时时间</div><div class=\"line\">        httpClientBuilder.readTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</div><div class=\"line\">        //设置缓存位置，名称</div><div class=\"line\">        File httpCacheDirectory = new File(context.getCacheDir(), &quot;OkHttpCache&quot;);</div><div class=\"line\">        //设置缓存大小</div><div class=\"line\">        httpClientBuilder.cache(new Cache(httpCacheDirectory, 10 * 1024 * 1024));</div><div class=\"line\">        //返回配置完成的OkhttpClint</div><div class=\"line\">        return httpClientBuilder.build();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h5 id=\"重载不用配置下载监听的方法\"><a href=\"#重载不用配置下载监听的方法\" class=\"headerlink\" title=\"重载不用配置下载监听的方法\"></a>重载不用配置下载监听的方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">private OkHttpClient getOkHttpClient(Context context) &#123;</div><div class=\"line\"></div><div class=\"line\">        return getOkHttpClient(context,null);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">#### 构造Gson对象</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">``` </div><div class=\"line\">    private final Gson mGsonDateFormat;</div><div class=\"line\"></div><div class=\"line\">    public NetServiceFactory() &#123;</div><div class=\"line\">        mGsonDateFormat = new GsonBuilder()</div><div class=\"line\">                .setDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;)</div><div class=\"line\">                .create();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"下载监听接口\"><a href=\"#下载监听接口\" class=\"headerlink\" title=\"下载监听接口\"></a>下载监听接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ProgressLisener&#123;</div><div class=\"line\"></div><div class=\"line\">       void prigress(long read,long count,boolean isOver);</div><div class=\"line\">       </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"通过Retrofit构造Service对象\"><a href=\"#通过Retrofit构造Service对象\" class=\"headerlink\" title=\"通过Retrofit构造Service对象\"></a>通过Retrofit构造Service对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">//serviceClass 网络访问接口 context 用户上下文，如果APP全局静态访问的话，使用ApplicarionContext，其他传ActivityContex就可以了，lisener 下载监听接口</div><div class=\"line\"> public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl,ProgressLisener lisener) &#123;</div><div class=\"line\">        //设置一个线程池，线程池最大运行5个任务</div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(5);</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder()</div><div class=\"line\">                //服务器BaseUrl</div><div class=\"line\">                .baseUrl(baseurl)</div><div class=\"line\">                //配置OkhttpClint</div><div class=\"line\">                .client(getOkHttpClient(context,lisener))</div><div class=\"line\">                //设置callback线程池</div><div class=\"line\">                .callbackExecutor(executorService)</div><div class=\"line\">                //添加Gson适配器，直接把Json字符串解析成对象</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create(mGsonDateFormat))</div><div class=\"line\">                //添加RxJava适配器，让整个网络访问流程呈现函数式操作</div><div class=\"line\">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">                .build();</div><div class=\"line\">        return retrofit.create(serviceClass);</div><div class=\"line\">    &#125;</div><div class=\"line\">    //重载不配置下载监听的方法</div><div class=\"line\">    public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl) &#123;</div><div class=\"line\">        return createService(serviceClass,context,baseurl,null);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"把整个类单例\"><a href=\"#把整个类单例\" class=\"headerlink\" title=\"把整个类单例\"></a>把整个类单例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static class SingletonHolder &#123;</div><div class=\"line\">        private static final NetServiceFactory INSTANCE = new NetServiceFactory();</div><div class=\"line\">    &#125;</div><div class=\"line\">public static NetServiceFactory getInstance() &#123;</div><div class=\"line\">        return SingletonHolder.INSTANCE;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"完整代码-3\"><a href=\"#完整代码-3\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Retrofit网络服务构造类</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class NetServiceFactory &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 默认超时时间</div><div class=\"line\">     */</div><div class=\"line\">    private final static long DEFAULT_TIMEOUT = 10;</div><div class=\"line\">    /**</div><div class=\"line\">     * Gson对象</div><div class=\"line\">     */</div><div class=\"line\">    private final Gson mGsonDateFormat;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 构造方法，初始化Gson对象</div><div class=\"line\">     */</div><div class=\"line\">    public NetServiceFactory() &#123;</div><div class=\"line\">        mGsonDateFormat = new GsonBuilder()</div><div class=\"line\">                .setDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;)</div><div class=\"line\">                .create();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 静态化该类对象</div><div class=\"line\">     */</div><div class=\"line\">    private static class SingletonHolder &#123;</div><div class=\"line\">        private static final NetServiceFactory INSTANCE = new NetServiceFactory();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获取队里对象</div><div class=\"line\">     * @return 网络服务对象</div><div class=\"line\">     */</div><div class=\"line\">    public static NetServiceFactory getInstance() &#123;</div><div class=\"line\">        return SingletonHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 构造网络服务Service 此方法需要配置下载监听接口，如不需要请调另外的重载方法！</div><div class=\"line\">     * @param serviceClass  API接口</div><div class=\"line\">     * @param context       上下文</div><div class=\"line\">     * @param baseurl       服务器BaseUrl</div><div class=\"line\">     * @param lisener       下载进度监听</div><div class=\"line\">     * @param &lt;S&gt;           返回服务对象</div><div class=\"line\">     * @return   服务接口</div><div class=\"line\">     */</div><div class=\"line\">    public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl,ProgressLisener lisener) &#123;</div><div class=\"line\">        //创建CallBack线程池，最大值为5</div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(5);</div><div class=\"line\">        //构建Retrofit对象</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder()</div><div class=\"line\">                //服务器BaseUrl</div><div class=\"line\">                .baseUrl(baseurl)</div><div class=\"line\">                //配置OkHttpClint</div><div class=\"line\">                .client(getOkHttpClient(context,lisener))</div><div class=\"line\">                //配置回调线程池</div><div class=\"line\">                .callbackExecutor(executorService)</div><div class=\"line\">                //添加Gson解析</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create(mGsonDateFormat))</div><div class=\"line\">                //添加RxJava函数式变成</div><div class=\"line\">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">                .build();</div><div class=\"line\">                //把接口注册到Retrofit中</div><div class=\"line\">        return retrofit.create(serviceClass);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 构造网络服务Service</div><div class=\"line\">     * @param serviceClass  API接口</div><div class=\"line\">     * @param context       上下文</div><div class=\"line\">     * @param baseurl       服务器BaseUrl</div><div class=\"line\">     * @param &lt;S&gt;           返回服务对象</div><div class=\"line\">     * @return  API服务接口</div><div class=\"line\">     */</div><div class=\"line\">    public &lt;S&gt; S createService(Class&lt;S&gt; serviceClass,Context context,String baseurl) &#123;</div><div class=\"line\">        return createService(serviceClass,context,baseurl,null);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 配置OkHttpClint 此方法需要配置下载进度监听接口 如不需要 请调用其他重载方法</div><div class=\"line\">     * @param context 用户上下文</div><div class=\"line\">     * @param lisener 下载进度1监听接口</div><div class=\"line\">     * @return  okHttpClint对象</div><div class=\"line\">     */</div><div class=\"line\">    private OkHttpClient getOkHttpClient(Context context,ProgressLisener lisener) &#123;</div><div class=\"line\">        //定制OkHttp</div><div class=\"line\">        OkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder();</div><div class=\"line\">        //添加拦截器，维护Cookies，设置下载进度监听监听器</div><div class=\"line\">        httpClientBuilder.addInterceptor(new ReceivedInterceptor(context)).addInterceptor(new AddCookiesInterceptor(context)).addInterceptor(new ProgressInterceptor(lisener));</div><div class=\"line\">        //设置连接超时时间</div><div class=\"line\">        httpClientBuilder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</div><div class=\"line\">        //设置写超时时间</div><div class=\"line\">        httpClientBuilder.writeTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</div><div class=\"line\">        //设置读超时时间</div><div class=\"line\">        httpClientBuilder.readTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</div><div class=\"line\">        //设置缓存路径 名称</div><div class=\"line\">        File httpCacheDirectory = new File(context.getCacheDir(), &quot;OkHttpCache&quot;);</div><div class=\"line\">        //设置缓存大小</div><div class=\"line\">        httpClientBuilder.cache(new Cache(httpCacheDirectory, 10 * 1024 * 1024));</div><div class=\"line\">        return httpClientBuilder.build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 配置OkHttp 此方法不用配置下载监听接口</div><div class=\"line\">     * @param context 上下文</div><div class=\"line\">     * @return OkHttpClint对象</div><div class=\"line\">     */</div><div class=\"line\">    private OkHttpClient getOkHttpClient(Context context) &#123;</div><div class=\"line\"></div><div class=\"line\">        return getOkHttpClient(context,null);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 下载监听接口</div><div class=\"line\">     */</div><div class=\"line\">    public interface ProgressLisener&#123;</div><div class=\"line\">       void prigress(long read,long count,boolean isOver);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数据获取封装\"><a href=\"#数据获取封装\" class=\"headerlink\" title=\"数据获取封装\"></a>数据获取封装</h2><h4 id=\"处理观察者并获取数据\"><a href=\"#处理观察者并获取数据\" class=\"headerlink\" title=\"处理观察者并获取数据\"></a>处理观察者并获取数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 处理Retrofit注册后的Observable</div><div class=\"line\"> * @param observable api观察者   例如 api.login(&quot;user&quot;,&quot;111&quot;);</div><div class=\"line\"> * @param getData    数据获取接口</div><div class=\"line\"> * @param OutType    自定义线程处理</div><div class=\"line\"> * @param &lt;T&gt;        Json字符串转换的类 必须继承BaseData 这样才可以进行错误处理</div><div class=\"line\"> */</div><div class=\"line\">public static &lt;T extends BaseData&gt; void RxGet(Observable&lt;T&gt; observable, final RxDataListener&lt;T&gt; getData, Observable.Transformer&lt;T, T&gt; OutType)&#123;</div><div class=\"line\">    //线程处理</div><div class=\"line\">    observable.compose(OutType)</div><div class=\"line\">            //结果回调</div><div class=\"line\">            .subscribe(new Observer&lt;T&gt;() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void onCompleted() &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">                //错误处理</div><div class=\"line\">                @Override</div><div class=\"line\">                public void onError(Throwable paramThrowable) &#123;</div><div class=\"line\">                    if ((paramThrowable instanceof SocketTimeoutException) || (paramThrowable.getMessage().contains(&quot;Failed&quot;)) || (paramThrowable.getMessage().contains(&quot;502&quot;)) || (paramThrowable.getMessage().contains(&quot;404&quot;)))&#123;</div><div class=\"line\">                        Utils.ToastS(&quot;网络故障！&quot;);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    getData.failed(paramThrowable);</div><div class=\"line\">                &#125;</div><div class=\"line\">                //错误处理，返回结果！</div><div class=\"line\">                @Override</div><div class=\"line\">                public void onNext(T o) &#123;</div><div class=\"line\">                    if (o.getResult()==1)&#123;</div><div class=\"line\">                        getData.success(o);</div><div class=\"line\">                    &#125;else&#123;</div><div class=\"line\">                        getData.failed(new Throwable(&quot;获取数据失败！原因：&quot;+o.getMessage()));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 处理Retrofit注册后的Observable 该类不需要传递线程处理参数，使用默认线程参数  observaon(Mian) subscribeOn(IO)</div><div class=\"line\"> * @param observable    API观察者</div><div class=\"line\"> * @param rxLisener     数据监听接口</div><div class=\"line\"> * @param &lt;T&gt;           Json字符串转换的类 必须继承BaseData 这样才可以进行错误处理</div><div class=\"line\"> */</div><div class=\"line\">public static &lt;T extends BaseData&gt; void RxGet(Observable&lt;T&gt; observable, final RxDataListener&lt;T&gt; rxLisener)&#123;</div><div class=\"line\">    RxGet(observable,rxLisener,ThreadFromUtils.&lt;T&gt;defaultSchedulers());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数据获取接口\"><a href=\"#数据获取接口\" class=\"headerlink\" title=\"数据获取接口\"></a>数据获取接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 数据获取接口</div><div class=\"line\"> * @param &lt;T&gt; Gson解析类</div><div class=\"line\"> */</div><div class=\"line\">public interface RxDataListener&lt; T extends BaseData&gt;&#123;</div><div class=\"line\">    void success(T data);</div><div class=\"line\">    void failed(Throwable e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"BaseData\"><a href=\"#BaseData\" class=\"headerlink\" title=\"BaseData\"></a>BaseData</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public abstract class BaseData &#123;</div><div class=\"line\"></div><div class=\"line\">    public abstract String getMessage();</div><div class=\"line\"></div><div class=\"line\">    public abstract int getResult();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"下载文件封装\"><a href=\"#下载文件封装\" class=\"headerlink\" title=\"下载文件封装\"></a>下载文件封装</h2><h4 id=\"封装下载文件服务接口，封装处理下载文件观察者操作\"><a href=\"#封装下载文件服务接口，封装处理下载文件观察者操作\" class=\"headerlink\" title=\"封装下载文件服务接口，封装处理下载文件观察者操作\"></a>封装下载文件服务接口，封装处理下载文件观察者操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 下载文件方法，带进度监听功能</div><div class=\"line\"> * @param tClass    下载service接口</div><div class=\"line\"> * @param activity  调用者Activity</div><div class=\"line\"> * @param listener  进度监听</div><div class=\"line\"> * @param &lt;S&gt;       service接口</div><div class=\"line\"> * @return          注册成功的service接口</div><div class=\"line\"> */</div><div class=\"line\">public static &lt;S&gt; S  DownFile(Class&lt;S&gt; tClass, final Activity activity, final DownloadListener listener)&#123;</div><div class=\"line\">     return  NetServiceFactory.getInstance().createService(tClass, activity.getApplicationContext(), &quot;http://onghqryqs.bkt.clouddn.com/apk/&quot;, new NetServiceFactory.ProgressLisener() &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public void prigress(final long read, final long count, final boolean isOver) &#123;</div><div class=\"line\">            //让接收数据后的操作在主线程运行</div><div class=\"line\">            activity.runOnUiThread(new Runnable() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void run() &#123;</div><div class=\"line\">                    //传递进度参数</div><div class=\"line\">                    listener.listener(read,count,isOver);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 执行下载操作 并写入本地</div><div class=\"line\"> * @param observable       观察者</div><div class=\"line\"> * @param downLoadManager  写入本地操作接口，本地有实现类，可以实现该类自定义本地操作接口！</div><div class=\"line\"> */</div><div class=\"line\">public static void RxDownLoad(Observable&lt;ResponseBody&gt; observable , final BaseDownLoadManager downLoadManager)&#123;</div><div class=\"line\">    observable</div><div class=\"line\">    .compose(ThreadFromUtils.&lt;ResponseBody&gt;all_io())</div><div class=\"line\">            .subscribe(new Observer&lt;ResponseBody&gt;() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void onCompleted() &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                @Override</div><div class=\"line\">                public void onError(Throwable e) &#123;</div><div class=\"line\">                    Log.e(&quot;RxUtils下载文件异常&quot;,e.getMessage());</div><div class=\"line\">                    Utils.ToastL(&quot;RxUtils下载文件异常&quot;+e.getMessage());</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                @Override</div><div class=\"line\">                public void onNext(ResponseBody response) &#123;</div><div class=\"line\">                    downLoadManager.writeResponseBodyToDisk(FrameInit.Mcontext.getApplicationContext(), response);</div><div class=\"line\">                &#125;</div><div class=\"line\">           &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  执行下载操作 并写入本地 采用已经实现的 DownLoadManager 进行写入本地操作</div><div class=\"line\"> *  @param observable 观察者</div><div class=\"line\"> */</div><div class=\"line\">public static void RxDownLoad(Observable&lt;ResponseBody&gt; observable)&#123;</div><div class=\"line\">    RxDownLoad(observable,new DownLoadManager());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"下载进度传递接口\"><a href=\"#下载进度传递接口\" class=\"headerlink\" title=\"下载进度传递接口\"></a>下载进度传递接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 下载进度传递接口</div><div class=\"line\"> */</div><div class=\"line\">public interface DownloadListener&#123;</div><div class=\"line\">    void listener(long read,long count,boolean isOver);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"本地写入接口\"><a href=\"#本地写入接口\" class=\"headerlink\" title=\"本地写入接口\"></a>本地写入接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface BaseDownLoadManager &#123;</div><div class=\"line\">    boolean writeResponseBodyToDisk(Context context, ResponseBody body);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"内置的已经实现接口的本地写入工具类\"><a href=\"#内置的已经实现接口的本地写入工具类\" class=\"headerlink\" title=\"内置的已经实现接口的本地写入工具类\"></a>内置的已经实现接口的本地写入工具类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 本地写入工具类</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">public class DownLoadManager implements BaseDownLoadManager &#123;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Log TAG信息</div><div class=\"line\">     */</div><div class=\"line\">    public static final String TAG = &quot;DownLoadManager&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * APK contentType</div><div class=\"line\">     */</div><div class=\"line\">    public static String APK_CONTENTTYPE = &quot;application/octet-stream&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * APK contentType</div><div class=\"line\">     */</div><div class=\"line\">    public static String APK_CONTENTTYPE2 = &quot;application/vnd.android.package-archive&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * png contentType</div><div class=\"line\">     */</div><div class=\"line\">    public static String PNG_CONTENTTYPE = &quot;image/png&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * jpg contentType</div><div class=\"line\">     */</div><div class=\"line\">    public static String JPG_CONTENTTYPE = &quot;image/jpg&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 文件后缀</div><div class=\"line\">     */</div><div class=\"line\">    public static String fileSuffix=&quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 文件存储路径</div><div class=\"line\">     */</div><div class=\"line\">    private String path=null;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 使用无参构造方法 使用默认路径 默认文件名</div><div class=\"line\">     */</div><div class=\"line\">    public DownLoadManager() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 使用一参构造方法 自定义存储文件的路径 以及文件名</div><div class=\"line\">     * @param path</div><div class=\"line\">     */</div><div class=\"line\">    public DownLoadManager(String path) &#123;</div><div class=\"line\">        this.path = path;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 写入本地操作</div><div class=\"line\">     * @param context   上下文</div><div class=\"line\">     * @param body      ResponseBody</div><div class=\"line\">     * @return          是否存储完成</div><div class=\"line\">     */</div><div class=\"line\">    public  boolean  writeResponseBodyToDisk(Context context, ResponseBody body) &#123;</div><div class=\"line\">        //记录文件类型</div><div class=\"line\">        Log.d(TAG, &quot;contentType:&gt;&gt;&gt;&gt;&quot; + body.contentType().toString());</div><div class=\"line\">        //如果路径为空则使用默认路径</div><div class=\"line\">        if (path==null||path.equals(&quot;&quot;))&#123;</div><div class=\"line\">            String type = body.contentType().toString();</div><div class=\"line\">            //判断文件类型使用相应后缀</div><div class=\"line\">            if (type.equals(APK_CONTENTTYPE)||type.equals(APK_CONTENTTYPE2)) &#123;</div><div class=\"line\">                fileSuffix = &quot;.apk&quot;;</div><div class=\"line\">            &#125; else if (type.equals(PNG_CONTENTTYPE)) &#123;</div><div class=\"line\">                fileSuffix = &quot;.png&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //生成最终path，默认在应用程序根目录</div><div class=\"line\">            path = context.getExternalFilesDir(null) + File.separator + System.currentTimeMillis() + fileSuffix;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //记录存储路径</div><div class=\"line\">        Log.d(TAG, &quot;path:&gt;&gt;&gt;&gt;&quot; + path);</div><div class=\"line\"></div><div class=\"line\">        try &#123;</div><div class=\"line\">            //根据路径生成file</div><div class=\"line\">            File file = new File(path);</div><div class=\"line\">            InputStream inputStream = null;</div><div class=\"line\">            OutputStream outputStream = null;</div><div class=\"line\"></div><div class=\"line\">            try &#123;</div><div class=\"line\">                //一次写入4096</div><div class=\"line\">                byte[] fileReader = new byte[4096];</div><div class=\"line\">                </div><div class=\"line\">                inputStream = body.byteStream();</div><div class=\"line\">                </div><div class=\"line\">                outputStream = new FileOutputStream(file);</div><div class=\"line\">                </div><div class=\"line\">                while (true) &#123;</div><div class=\"line\">                    int read = inputStream.read(fileReader);</div><div class=\"line\"></div><div class=\"line\">                    if (read == -1) &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    outputStream.write(fileReader, 0, read);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">                outputStream.flush();</div><div class=\"line\"></div><div class=\"line\">                return true;</div><div class=\"line\">                </div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                </div><div class=\"line\">                return false;</div><div class=\"line\">                </div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                if (inputStream != null) &#123;</div><div class=\"line\">                    </div><div class=\"line\">                    inputStream.close();</div><div class=\"line\">                    </div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (outputStream != null) &#123;</div><div class=\"line\">                    </div><div class=\"line\">                    outputStream.close();</div><div class=\"line\">                    </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            </div><div class=\"line\">            return false;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><ul>\n<li>API接口：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface apiservice &#123;</div><div class=\"line\"></div><div class=\"line\">    @GET(&quot;cat.json&quot;)</div><div class=\"line\">    Observable&lt;catModel&gt; getCat();</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>普通接口访问具体示例</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">RxDataUtils.RxGet(api.getCat(), new RxDataUtils.RxDataListener&lt;catModel&gt;() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void success(catModel data) &#123;</div><div class=\"line\">               </div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            @Override</div><div class=\"line\">            public void failed(Throwable e) &#123;</div><div class=\"line\">               </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>文件下载具体示例</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//下载服务接口</div><div class=\"line\">public interface down &#123;</div><div class=\"line\">    @GET(&quot;w.apk&quot;)</div><div class=\"line\">    Observable&lt;ResponseBody&gt; DownFile();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//采用默认路径</div><div class=\"line\">RxDataUtils.RxDownLoad( RxDataUtils.DownFile(down.class, activity, new RxDataUtils.DownloadListener() &#123;</div><div class=\"line\">           @Override</div><div class=\"line\">           public void listener(long read, long count, boolean isOver) &#123;</div><div class=\"line\">            //进度监听</div><div class=\"line\">        &#125;</div><div class=\"line\">       &#125;).DownFile());</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//自定义下载路径 当然也可以实现BaseDownLoadManager接口自定义本地序列化</div><div class=\"line\">RxDataUtils.RxDownLoad( RxDataUtils.DownFile(down.class, activity, new RxDataUtils.DownloadListener() &#123;</div><div class=\"line\">           @Override</div><div class=\"line\">           public void listener(long read, long count, boolean isOver) &#123;</div><div class=\"line\">         </div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;).DownFile(),new DownLoadManager(&quot;xxx/xxx/xxx/aaa.apk&quot;));</div></pre></td></tr></table></figure>\n","comments":true,"link":"","tags":[{"name":"Android","slug":"Android","permalink":"https://yumengshuaii.github.io/tags/Android/"}]},{"title":"Android集成友盟推送","date":"2017-03-30T04:46:36.000Z","path":"2017/03/30/5/","text":"引言友盟+发布的sdk总体来说质量都挺好，以社会化分享来说，易于集成，代码可读性高，文档条理清晰，本文详细介绍关于友盟推Android端集成。 上友盟官网申请友盟账号，下来友盟U-Push Android版SDK，并且申请APP，得到AppKey，Umeng Message Secre，App Master Secret（这些步骤就不详细描述了，傻瓜式操作）。友盟官网 进入集成阶段，解压下载好的SDK压缩包，在需要集成推送功能的项目中导入PushSdk这个module，导入流程：菜单栏选择File&gt;new&gt;importModule,然后选择PushSdk。 导入完成后，在Priject窗口右击主项目，单击Open Module Settings ，选择dependeneies,点击+号，选择module dependeney，然后选择自己需要依赖的module。 依赖完成后，进行代码配置阶段：首先在AndroidXml配置文件中，Applcation标签下，加入如下metadata 12&lt;meta-data android:name=&quot;UMENG_APPKEY&quot;android:value=&quot;xxxxxxxxxxxxxxxx&quot;&gt;&lt;/meta-data&gt; 12&lt;meta_data android:name=&quot;UMENG_MESSAGE_SECRET&quot;android:value=&quot;xxxxxxxxxx&quot;&gt;&lt;/meta-data&gt; 以上参数，就是第一步申请的来的相关参数，注意，申请APP的时候包名一定要正确，否则会导致集成失败。 自定义Application，并且在application的onCreate方法中，进行初始化pushSdk的相关操作，代码如下： //获取Push服务单例对象 PushAgent mPushAgent = PushAgent.getInstance(this); //注册推送服务，每次调用register方法都会回调该接口 mPushAgent.register(new IUmengRegisterCallback() { @Override public void onSuccess(String deviceToken) { //注册成功会返回device token } @Override public void onFailure(String s, String s1) { } }); PushAgent.getInstance(getApplicationContext()).onAppStart(); 至此集成友盟推送消息完毕，请到友盟后台管理，推送消息测试是否集成成功，如集成失败，请检查本文步骤，查看官网文档，看看是否遗漏相关操作。","content":"<p><strong>引言</strong><br><code>友盟+发布的sdk总体来说质量都挺好，以社会化分享来说，易于集成，代码可读性高，文档条理清晰，本文详细介绍关于友盟推Android端集成。</code></p>\n<ol>\n<li>上友盟官网申请友盟账号，下来友盟U-Push Android版SDK，并且申请APP，得到AppKey，Umeng Message Secre，App Master Secret（这些步骤就不详细描述了，傻瓜式操作）。<a href=\"http://www.umeng.com/\" target=\"_blank\" rel=\"external\">友盟官网</a></li>\n<li>进入集成阶段，解压下载好的SDK压缩包，在需要集成推送功能的项目中导入PushSdk这个module，导入流程：菜单栏选择File&gt;new&gt;importModule,然后选择PushSdk。</li>\n<li>导入完成后，在Priject窗口右击主项目，单击Open Module Settings ，选择dependeneies,点击+号，选择module dependeney，然后选择自己需要依赖的module。<br> <img src=\"http://onghqryqs.bkt.clouddn.com/image/jpg/71C57C05-2085-4068-8278-6426F77102F6.png?imageView2/0/q/75|watermark/2/text/WXVNZW5nU2h1YWlfQmxvZw==/font/5qW35L2T/fontsize/600/fill/I0QzRDBEMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim\" alt=\"图1\"></li>\n<li>依赖完成后，进行代码配置阶段：首先在AndroidXml配置文件中，Applcation标签下，加入如下metadata</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta-data android:name=&quot;UMENG_APPKEY&quot;android:value=&quot;xxxxxxxxxxxxxxxx&quot;&gt;</div><div class=\"line\">&lt;/meta-data&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta_data android:name=&quot;UMENG_MESSAGE_SECRET&quot;android:value=&quot;xxxxxxxxxx&quot;&gt;</div><div class=\"line\">&lt;/meta-data&gt;</div></pre></td></tr></table></figure>\n<p>以上参数，就是第一步申请的来的相关参数，注意，申请APP的时候包名一定要正确，否则会导致集成失败。</p>\n<ol>\n<li><p>自定义Application，并且在application的onCreate方法中，进行初始化pushSdk的相关操作，代码如下：</p>\n<pre><code>//获取Push服务单例对象\nPushAgent mPushAgent = PushAgent.getInstance(this);\n//注册推送服务，每次调用register方法都会回调该接口\nmPushAgent.register(new IUmengRegisterCallback() {\n\n    @Override\n    public void onSuccess(String deviceToken) {\n        //注册成功会返回device token\n    }\n\n    @Override\n    public void onFailure(String s, String s1) {\n\n    }\n});\nPushAgent.getInstance(getApplicationContext()).onAppStart();\n</code></pre></li>\n<li><p>至此集成友盟推送消息完毕，请到友盟后台管理，推送消息测试是否集成成功，如集成失败，请检查本文步骤，查看官网文档，看看是否遗漏相关操作。</p>\n</li>\n</ol>\n","comments":true,"link":"","tags":[{"name":"Android","slug":"Android","permalink":"https://yumengshuaii.github.io/tags/Android/"}]},{"title":"LoadRunner常用技巧","date":"2017-03-27T07:30:46.000Z","path":"2017/03/27/1/","text":"脚本在录制脚本中，采用Loadrunner而自动录制脚本难免会录入一切不必要的数据，如果直接采用这个样的脚本进行压测的话，测试结果会十分不准确，因为在LoadRunner的录制过程中，包括Cookies，不必要的Url都会被录制下来，所以我们需要去删减脚本，增强脚本。 脚本越小越好主要包括：删除cookies、删除关键字EXTRARS后面的url、删除不必要的url、删除一切带有敏感标记的内容（比如：不想压测到实际生产线上时，则需要删除www.*.com的所有相关内容） 脚本增强脚本录制完成之后，通过脚本回放可以关联一些动态的参数。在脚本中找到动态参数，右键Replace with parameter（替换为动态参数），根据弹框出现的相应步骤添加动态参数的数据。 自定义参数： “Select next row ”选项中有以下几种选择：多个VU如何取值 Sequential：按照顺序一行行的读取。每一个虚拟用户都会按照相同的顺序读取 Random：在每次循环里随机的读取一个，但是在循环中一直保持不变 Unique ：每个VU取唯一的值。注意：使用该类型必须注意数据表有足够多的数。比如Controller中设定20 个虚拟用户进行5 次循环，那么编号为1 的虚拟用户取前5个数，编号为2 的虚拟用户取6-10的数，依次类推，这样数据表中至少要有100个数据，否则Controller 运行过程中会返回一个错误。 事务在压力测试中，对于性能的衡量，恒大一本分都是根据事务处理的TPS来衡量，所以在事务的设置中，我们要尽量的合理安排。事务要尽可能的只保留核心逻辑。 迭代与并发迭代；在运行时设置中打开step，在step中设置具体的step。并发要在Controller中设置要同时并发多少虚拟用户，可以根据自己的需求，去设置相应的压测方案！ 错误扫雷这里记录几个常遇到的错误解决办法，下载超时，连接超时，发送数据超时，发生这几个错误时，一般做这样的处理，就可以解决：","content":"<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p><code>在录制脚本中，采用Loadrunner而自动录制脚本难免会录入一切不必要的数据，如果直接采用这个样的脚本进行压测的话，测试结果会十分不准确，因为在LoadRunner的录制过程中，包括Cookies，不必要的Url都会被录制下来，所以我们需要去删减脚本，增强脚本。</code></p>\n<h4 id=\"脚本越小越好\"><a href=\"#脚本越小越好\" class=\"headerlink\" title=\"脚本越小越好\"></a>脚本越小越好</h4><p><code>主要包括：删除cookies、删除关键字EXTRARS后面的url、删除不必要的url、删除一切带有敏感标记的内容（比如：不想压测到实际生产线上时，则需要删除www.*.com的所有相关内容）</code></p>\n<h4 id=\"脚本增强\"><a href=\"#脚本增强\" class=\"headerlink\" title=\"脚本增强\"></a>脚本增强</h4><p><code>脚本录制完成之后，通过脚本回放可以关联一些动态的参数。在脚本中找到动态参数，右键Replace with parameter（替换为动态参数），根据弹框出现的相应步骤添加动态参数的数据。\n自定义参数：\n“Select next row ”选项中有以下几种选择：多个VU如何取值\nSequential：按照顺序一行行的读取。每一个虚拟用户都会按照相同的顺序读取\nRandom：在每次循环里随机的读取一个，但是在循环中一直保持不变\nUnique ：每个VU取唯一的值。注意：使用该类型必须注意数据表有足够多的数。比如Controller中设定20 个虚拟用户进行5 次循环，那么编号为1 的虚拟用户取前5个数，编号为2 的虚拟用户取6-10的数，依次类推，这样数据表中至少要有100个数据，否则Controller 运行过程中会返回一个错误。</code></p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p><code>在压力测试中，对于性能的衡量，恒大一本分都是根据事务处理的TPS来衡量，所以在事务的设置中，我们要尽量的合理安排。事务要尽可能的只保留核心逻辑。</code></p>\n<h3 id=\"迭代与并发\"><a href=\"#迭代与并发\" class=\"headerlink\" title=\"迭代与并发\"></a>迭代与并发</h3><p><code>迭代；在运行时设置中打开step，在step中设置具体的step。并发要在Controller中设置要同时并发多少虚拟用户，可以根据自己的需求，去设置相应的压测方案！</code><br><img src=\"http://onghqryqs.bkt.clouddn.com/Image/jpg%E5%B9%B6%E5%8F%91.png?imageView2/0/q/75|watermark/2/text/WXVNZW5nU2h1YWlfQmxvZw==/font/5qW35L2T/fontsize/600/fill/I0QzRDBEMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim\" alt=\"\"></p>\n<h3 id=\"错误扫雷\"><a href=\"#错误扫雷\" class=\"headerlink\" title=\"错误扫雷\"></a>错误扫雷</h3><p><code>这里记录几个常遇到的错误解决办法，下载超时，连接超时，发送数据超时，发生这几个错误时，一般做这样的处理，就可以解决：</code><br><img src=\"http://onghqryqs.bkt.clouddn.com/Image/jpg%E9%94%99%E8%AF%AF.png?imageView2/0/q/75|watermark/2/text/WXVNZW5nU2h1YWlfQmxvZw==/font/5qW35L2T/fontsize/600/fill/I0QzRDBEMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim\" alt=\"\"></p>\n","comments":true,"link":"","tags":[{"name":"LoadRunner","slug":"LoadRunner","permalink":"https://yumengshuaii.github.io/tags/LoadRunner/"}]},{"title":"LoadRunner设置集结点的方法及原理","date":"2017-03-27T05:32:52.000Z","path":"2017/03/27/2/","text":"集结点的作用一般是在测试并发时，线程与进程也跟人一样，有强有弱，有的占用资源多，有的占用资源少，所以这种情况测试并发会很不准确，所以就引入了集结点这个概念，集结点就是，如果当前用户指定参与集结点的Vuser都到达了用户指定集结点的位置，那么会同时释放所有到达集结点的Vuser，同时执行之后的测试流程，集结点这个概念，在并发测试中扮演的就是一个减小并发误差的角色。 设置集结点的方法一般分为脚本设置，控制器中设置 脚本添加集结点（Rendezvous方法） lr_rendezvous(&quot;集合点&quot;) //添加集合点 一般情况加插入集结点时，如果脚本中包含事务，那么设置集结点的位置一般在事务之外。 控制中设置集合点 1.在控制器界面中（Controller）打开菜单栏，选择 Scenario -&gt; Rendezvous 打开集合点的设置页面。2.这时可以看到，Pollcy按钮，在这里可以设置集合点策略，可以看到在界面右侧，有对应的Vusers列表，我们可以在有需求的时候，选中某个Vuser点击DisableVuser，可以使该Vuser忽略该集合点设置的集合！3.设置集合策略，在点击Pollcy按钮后会弹框提示用户选择相应的策略：第一个策略表示，当到达集合点的Vuser总数占全部Vuser对应百分比的虚拟用户到达集合时，释放虚拟用户继续运行测试流程;第二个策略表示，当到达集合点的Vuser占运行时全部Vuser的用户到达集结时，释放虚拟用户继续执行测试流程;第三个策略表示，当到达集合点的Vuser总是达到用户指定的Vuser总数时，释放虚拟用户继续执行测试流程。 最后贴上完整脚本 Action() { int nHttpRetCode; //设置集合点 lr_rendezvous(&quot;login_point&quot;); //默认长度256 web_set_max_html_param_len(&quot;262144&quot;); web_reg_save_param(&quot;ResponseBody&quot;, &quot;LB=&quot;, &quot;RB=&quot;, &quot;Search=Body&quot;, LAST); web_save_header(RESPONSE,&quot;ResponseHeader&quot;); //开启事务 lr_start_transaction(&quot;Communicate&quot;); web_custom_request(&quot;saveUser&quot;, &quot;URL=http://www.javamall.com.cn/xxxx/xxx/xxx/xxx/xxx?username=food&amp;password=111111&quot;, &quot;Method=GET&quot;, &quot;Resource=0&quot;, &quot;Referer=&quot;, &quot;Mode=HTTP&quot;, &quot;EncType=text/html;charset=UTF-8&quot;, &quot;Body=&quot;, LAST); lr_convert_string_encoding(lr_eval_string(&quot;{ResponseBody}&quot;),&quot;utf-8&quot;,NULL,&quot;ResponseBody&quot;); lr_output_message(&quot;# xxxx\\n %s&quot;, lr_eval_string(&quot;{ResponseHeader}&quot;)); lr_output_message(&quot;# xxxx\\n %s&quot;, lr_eval_string(&quot;{ResponseBody}&quot;)); //结束事务 lr_end_transaction(&quot;Communicate&quot;, LR_PASS); nHttpRetCode = web_get_int_property(HTTP_INFO_RETURN_CODE); if(nHttpRetCode == 200) { lr_output_message(&quot;---------------Success!------------&quot;); } else { lr_output_message(&quot;----------------Failed!------------&quot;); } return 0; }","content":"<h3 id=\"集结点的作用\"><a href=\"#集结点的作用\" class=\"headerlink\" title=\"集结点的作用\"></a>集结点的作用</h3><p><code>一般是在测试并发时，线程与进程也跟人一样，有强有弱，有的占用资源多，有的占用资源少，所以这种情况测试并发会很不准确，所以就引入了集结点这个概念，集结点就是，如果当前用户指定参与集结点的Vuser都到达了用户指定集结点的位置，那么会同时释放所有到达集结点的Vuser，同时执行之后的测试流程，集结点这个概念，在并发测试中扮演的就是一个减小并发误差的角色。</code></p>\n<h4 id=\"设置集结点的方法一般分为脚本设置，控制器中设置\"><a href=\"#设置集结点的方法一般分为脚本设置，控制器中设置\" class=\"headerlink\" title=\"设置集结点的方法一般分为脚本设置，控制器中设置\"></a>设置集结点的方法一般分为脚本设置，控制器中设置</h4><ul>\n<li><p>脚本添加集结点（Rendezvous方法）</p>\n<pre><code>lr_rendezvous(&quot;集合点&quot;)  //添加集合点\n一般情况加插入集结点时，如果脚本中包含事务，那么设置集结点的位置一般在事务之外。\n</code></pre></li>\n<li><p>控制中设置集合点</p>\n<p>1.在控制器界面中（Controller）打开菜单栏，选择 Scenario -&gt; Rendezvous 打开集合点的设置页面。<br><img src=\"http://onghqryqs.bkt.clouddn.com/Image/jpg/%E8%AE%BE%E7%BD%AE%E9%9B%86%E7%BB%93%E7%82%B9%E6%AD%A5%E9%AA%A41.png?imageView2/0/q/75|watermark/2/text/WXVNZW5nU2h1YWlfQmxvZw==/font/5qW35L2T/fontsize/600/fill/I0QzRDBEMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim\" alt=\"图1\"><br>2.这时可以看到，Pollcy按钮，在这里可以设置集合点策略，可以看到在界面右侧，有对应的Vusers列表，我们可以在有需求的时候，选中某个Vuser点击DisableVuser，可以使该Vuser忽略该集合点设置的集合！<br><img src=\"http://onghqryqs.bkt.clouddn.com/Image/jpg/%E8%AE%BE%E7%BD%AE%E9%9B%86%E7%BB%93%E7%82%B9%E6%AD%A5%E9%AA%A42.png?imageView2/0/q/75|watermark/2/text/WXVNZW5nU2h1YWlfQmxvZw==/font/5qW35L2T/fontsize/600/fill/I0QzRDBEMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim\" alt=\"图2\"><br>3.设置集合策略，在点击Pollcy按钮后会弹框提示用户选择相应的策略：第一个策略表示，当到达集合点的Vuser总数占全部Vuser对应百分比的虚拟用户到达集合时，释放虚拟用户继续运行测试流程;第二个策略表示，当到达集合点的Vuser占运行时全部Vuser的用户到达集结时，释放虚拟用户继续执行测试流程;第三个策略表示，当到达集合点的Vuser总是达到用户指定的Vuser总数时，释放虚拟用户继续执行测试流程。<br><img src=\"http://onghqryqs.bkt.clouddn.com/Image/jpg/%E8%AE%BE%E7%BD%AE%E9%9B%86%E7%BB%93%E7%82%B9%E6%AD%A5%E9%AA%A43.png?imageView2/0/q/75|watermark/2/text/WXVNZW5nU2h1YWlfQmxvZw==/font/5qW35L2T/fontsize/600/fill/I0QzRDBEMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim\" alt=\"图3\"></p>\n</li>\n</ul>\n<h3 id=\"最后贴上完整脚本\"><a href=\"#最后贴上完整脚本\" class=\"headerlink\" title=\"最后贴上完整脚本\"></a>最后贴上完整脚本</h3><pre><code>  Action()\n{\n int nHttpRetCode;  \n//设置集合点\nlr_rendezvous(&quot;login_point&quot;);\n//默认长度256\n web_set_max_html_param_len(&quot;262144&quot;);   \nweb_reg_save_param(&quot;ResponseBody&quot;, &quot;LB=&quot;, &quot;RB=&quot;, &quot;Search=Body&quot;, LAST);  \nweb_save_header(RESPONSE,&quot;ResponseHeader&quot;);  \n//开启事务\nlr_start_transaction(&quot;Communicate&quot;);  \nweb_custom_request(&quot;saveUser&quot;,  \n                   &quot;URL=http://www.javamall.com.cn/xxxx/xxx/xxx/xxx/xxx?username=food&amp;password=111111&quot;,  \n                   &quot;Method=GET&quot;,  \n                   &quot;Resource=0&quot;,  \n                   &quot;Referer=&quot;,  \n                   &quot;Mode=HTTP&quot;,  \n                   &quot;EncType=text/html;charset=UTF-8&quot;,  \n                   &quot;Body=&quot;,  \n                   LAST); \n\nlr_convert_string_encoding(lr_eval_string(&quot;{ResponseBody}&quot;),&quot;utf-8&quot;,NULL,&quot;ResponseBody&quot;);\nlr_output_message(&quot;# xxxx\\n %s&quot;, lr_eval_string(&quot;{ResponseHeader}&quot;));  \nlr_output_message(&quot;# xxxx\\n %s&quot;, lr_eval_string(&quot;{ResponseBody}&quot;));  \n//结束事务\nlr_end_transaction(&quot;Communicate&quot;, LR_PASS);  \n\nnHttpRetCode = web_get_int_property(HTTP_INFO_RETURN_CODE);  \n\n\nif(nHttpRetCode == 200)  \n{  \n    lr_output_message(&quot;---------------Success!------------&quot;);  \n}  \nelse  \n{  \n    lr_output_message(&quot;----------------Failed!------------&quot;);  \n}  \nreturn 0;\n}\n</code></pre>","comments":true,"link":"","tags":[{"name":"LoadRunner","slug":"LoadRunner","permalink":"https://yumengshuaii.github.io/tags/LoadRunner/"}]},{"title":"LoadRunner压测Get方法","date":"2017-03-27T03:21:54.000Z","path":"2017/03/27/3/","text":"首先LoadRunner本身具有很多方法均可测试接口，今天我们使用web_custom_request方法进行Get接口测试。 int nHttpRetCode;//设置http请求code web_set_max_html_param_len(&quot;262144&quot;); // 默认最大长度为256 web_reg_save_param(&quot;ResponseBody&quot;,&quot;LB=&quot;,&quot;RB=&quot;,&quot;Search=Body&quot;, LAST);//设置ResponseBody web_save_header(RESPONSE,&quot;ResponseHeader&quot;);//添加header 如有需要可以开启事务 lr_start_transaction(&quot;Communicate&quot;);//开启事务，名为Communicate。 lr_end_transaction(&quot;Communicate&quot;, LR_PASS); //结束事务 调用request方法 web_custom_request(&quot;getname&quot;, &quot;URL=http://www.javamall.com.cn/xxx/xx/xx/xx/xx?username=xx&amp;password=xxx&quot;, &quot;Method=GET&quot;, &quot;Resource=0&quot;, &quot;Referer=&quot;, &quot;Mode=HTTP&quot;, &quot;EncType=text/html;charset=UTF-8&quot;, &quot;Body=&quot;, LAST); 对返回的Json数据进行转码 //转码 lr_convert_string_encoding(lr_eval_string(&quot;{ResponseBody}&quot;),&quot;utf-8&quot;,NULL,&quot;ResponseBody&quot;); //打印返回数据 lr_output_message(&quot;# 响应头信息：\\n %s&quot;,lr_eval_string(&quot;{ResponseHeader}&quot;)); lr_output_message(&quot;# 响应内容体：\\n %s&quot;,lr_eval_string(&quot;{ResponseBody}&quot;)); 获取Http请求码，并且判断是否成功！ //获取请求码 nHttpRetCode = web_get_int_property(HTTP_INFO_RETURN_CODE); //判断是否请求成功!(当请求码为200时，请求成功！) if(nHttpRetCode == 200) { lr_output_message(&quot;-------------Success!------------&quot;); } else { lr_output_message(&quot;----------------Failed!------------&quot;); } 完整代码 Action() { int nHttpRetCode; web_set_max_html_param_len(&quot;262144&quot;); // 默认最大长度为256 web_reg_save_param(&quot;ResponseBody&quot;, &quot;LB=&quot;, &quot;RB=&quot;, &quot;Search=Body&quot;, LAST); web_save_header(RESPONSE,&quot;ResponseHeader&quot;); lr_start_transaction(&quot;Communicate&quot;); web_custom_request(&quot;getname&quot;, &quot;URL=http://www.javamall.com.cn/xxx/xx/xx/xx/xxx?username=xxx&amp;password=xxx&quot;, &quot;Method=GET&quot;, &quot;Resource=0&quot;, &quot;Referer=&quot;, &quot;Mode=HTTP&quot;, &quot;EncType=text/html;charset=UTF-8&quot;, &quot;Body=&quot;, LAST); //打印返回信息 lr_convert_string_encoding(lr_eval_string(&quot;{ResponseBody}&quot;),&quot;utf-8&quot;,NULL,&quot;ResponseBody&quot;); lr_output_message(&quot;# 响应头信息：\\n %s&quot;, lr_eval_string(&quot;{ResponseHeader}&quot;)); lr_output_message(&quot;# 响应内容体：\\n %s&quot;, lr_eval_string(&quot;{ResponseBody}&quot;)); lr_end_transaction(&quot;Communicate&quot;, LR_PASS); nHttpRetCode = web_get_int_property(HTTP_INFO_RETURN_CODE); if(nHttpRetCode == 200) { lr_output_message(&quot;---------------Success!------------&quot;); } else { lr_output_message(&quot;----------------Failed!------------&quot;); } return 0; }","content":"<ul>\n<li><p>首先LoadRunner本身具有很多方法均可测试接口，今天我们使用web_custom_request方法进行Get接口测试。</p>\n<pre><code>int nHttpRetCode;//设置http请求code  \nweb_set_max_html_param_len(&quot;262144&quot;); // 默认最大长度为256 \nweb_reg_save_param(&quot;ResponseBody&quot;,&quot;LB=&quot;,&quot;RB=&quot;,&quot;Search=Body&quot;, LAST);//设置ResponseBody\nweb_save_header(RESPONSE,&quot;ResponseHeader&quot;);//添加header\n</code></pre></li>\n<li><p>如有需要可以开启事务</p>\n<pre><code>lr_start_transaction(&quot;Communicate&quot;);//开启事务，名为Communicate。\nlr_end_transaction(&quot;Communicate&quot;, LR_PASS); //结束事务\n</code></pre></li>\n<li><p>调用request方法</p>\n<pre><code>web_custom_request(&quot;getname&quot;,  \n           &quot;URL=http://www.javamall.com.cn/xxx/xx/xx/xx/xx?username=xx&amp;password=xxx&quot;,  \n           &quot;Method=GET&quot;,  \n           &quot;Resource=0&quot;,  \n           &quot;Referer=&quot;,  \n           &quot;Mode=HTTP&quot;,  \n           &quot;EncType=text/html;charset=UTF-8&quot;,  \n           &quot;Body=&quot;,  \n            LAST);\n</code></pre></li>\n<li><p>对返回的Json数据进行转码</p>\n<pre><code>//转码\nlr_convert_string_encoding(lr_eval_string(&quot;{ResponseBody}&quot;),&quot;utf-8&quot;,NULL,&quot;ResponseBody&quot;);\n//打印返回数据\nlr_output_message(&quot;# 响应头信息：\\n %s&quot;,lr_eval_string(&quot;{ResponseHeader}&quot;));\nlr_output_message(&quot;# 响应内容体：\\n %s&quot;,lr_eval_string(&quot;{ResponseBody}&quot;));  \n</code></pre></li>\n<li><p>获取Http请求码，并且判断是否成功！</p>\n<pre><code>//获取请求码\nnHttpRetCode = web_get_int_property(HTTP_INFO_RETURN_CODE);  \n    //判断是否请求成功!(当请求码为200时，请求成功！)\n    if(nHttpRetCode == 200)  \n    {  \n        lr_output_message(&quot;-------------Success!------------&quot;);  \n    }  \n    else  \n    {   \n        lr_output_message(&quot;----------------Failed!------------&quot;);  \n    }  \n</code></pre></li>\n<li><p>完整代码</p>\n<pre><code> Action() {\n\nint nHttpRetCode;  \nweb_set_max_html_param_len(&quot;262144&quot;); // 默认最大长度为256  \n\nweb_reg_save_param(&quot;ResponseBody&quot;, &quot;LB=&quot;, &quot;RB=&quot;, &quot;Search=Body&quot;, LAST);  \nweb_save_header(RESPONSE,&quot;ResponseHeader&quot;);  \n\nlr_start_transaction(&quot;Communicate&quot;);  \nweb_custom_request(&quot;getname&quot;,  \n                   &quot;URL=http://www.javamall.com.cn/xxx/xx/xx/xx/xxx?username=xxx&amp;password=xxx&quot;,  \n                   &quot;Method=GET&quot;,  \n                   &quot;Resource=0&quot;,  \n                   &quot;Referer=&quot;,  \n                   &quot;Mode=HTTP&quot;,  \n                   &quot;EncType=text/html;charset=UTF-8&quot;,  \n                   &quot;Body=&quot;,  \n                   LAST); \n\n//打印返回信息\nlr_convert_string_encoding(lr_eval_string(&quot;{ResponseBody}&quot;),&quot;utf-8&quot;,NULL,&quot;ResponseBody&quot;);\nlr_output_message(&quot;# 响应头信息：\\n %s&quot;, lr_eval_string(&quot;{ResponseHeader}&quot;));  \nlr_output_message(&quot;# 响应内容体：\\n %s&quot;, lr_eval_string(&quot;{ResponseBody}&quot;));  \nlr_end_transaction(&quot;Communicate&quot;, LR_PASS);  \n\nnHttpRetCode = web_get_int_property(HTTP_INFO_RETURN_CODE);  \n\nif(nHttpRetCode == 200)  \n{  \n    lr_output_message(&quot;---------------Success!------------&quot;);  \n}  \nelse  \n{  \n    lr_output_message(&quot;----------------Failed!------------&quot;);  \n }  \n    return 0;\n}\n</code></pre></li>\n</ul>\n","comments":true,"link":"","tags":[{"name":"LoadRunner","slug":"LoadRunner","permalink":"https://yumengshuaii.github.io/tags/LoadRunner/"}]},{"title":"WebView加载本地无Css的Html出现图片不匹配","date":"2017-03-27T03:21:54.000Z","path":"2017/03/27/4/","text":"引言 在Android开发的过程中,有事会遇到这样一种需求，尤其是在图文混排的情况下，有些人会采用直接使用html标签来实现效果，但是，在图片自适应的处理上总是不尽人意，本文针对这种情况下的图片处理做了优化！ ####WebView图片过大是因为，本地Html中没有CSS文件对其进行大小限制，我们通过嵌入Html标签来解决这个问题 设置Html开始与结尾 12private String start=&quot;&lt;html&gt;&quot;;private String end = &quot;&lt;/body&gt;&lt;/html&gt;&quot;; 设置整个页面的自适应宽度，拼接为Html标签 123456789101112131415161718 String header =&quot;&lt;head&gt;&lt;style&gt;img&#123;width:&quot;+(ScreenUtils.px2dip(getBaseContext(),ScreenUtils.getScreenWidthPX(getBaseContext()))-10)+&quot;px !important;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&quot;; //这两个方法是用来获取屏幕的宽度px并转换为dp ScreenUtils.px2dip(getBaseContext(),ScreenUtils.getScreenWidthPX(getBaseContext())); /** * 获取屏幕宽度 */ public static int getScreenWidthPX(Context context) &#123; return context.getResources().getDisplayMetrics().widthPixels;&#125;/** * 根据手机的分辨率从 px(像素) 的单位 转成为 dp */public static int px2dip(Context context, float pxValue) &#123; final float scale =context.getResources().getDisplayMetrics().density; return (int) (pxValue / scale + 0.5f); &#125; 3.拼接成HTML并加载到webView 1blog.loadDataWithBaseURL(&quot;&quot;,start+header+data.get(0).getContent()+end, &quot;text/html&quot;, &quot;utf-8&quot;,&quot;&quot;); 4.到此成功适配宽度","content":"<blockquote>\n<p>引言</p>\n</blockquote>\n<p><code>在Android开发的过程中,有事会遇到这样一种需求，尤其是在图文混排的情况下，有些人会采用直接使用html标签来实现效果，但是，在图片自适应的处理上总是不尽人意，本文针对这种情况下的图片处理做了优化！</code></p>\n<p>####WebView图片过大是因为，本地Html中没有CSS文件对其进行大小限制，我们通过嵌入Html标签来解决这个问题</p>\n<ol>\n<li>设置Html开始与结尾</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">private String start=&quot;&lt;html&gt;&quot;;</div><div class=\"line\">private String end = &quot;&lt;/body&gt;&lt;/html&gt;&quot;;</div></pre></td></tr></table></figure>\n<ol>\n<li>设置整个页面的自适应宽度，拼接为Html标签</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"> String header =&quot;&lt;head&gt;&lt;style&gt;img&#123;width:&quot;+(ScreenUtils.px2dip(getBaseContext(),ScreenUtils.getScreenWidthPX(getBaseContext()))-10)+&quot;px !important;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&quot;;</div><div class=\"line\"> </div><div class=\"line\"> //这两个方法是用来获取屏幕的宽度px并转换为dp</div><div class=\"line\"> ScreenUtils.px2dip(getBaseContext(),ScreenUtils.getScreenWidthPX(getBaseContext()));</div><div class=\"line\"> </div><div class=\"line\">/** </div><div class=\"line\">  * 获取屏幕宽度 </div><div class=\"line\">  */  </div><div class=\"line\">public static int getScreenWidthPX(Context context) &#123;  </div><div class=\"line\">  return context.getResources().getDisplayMetrics().widthPixels;</div><div class=\"line\">&#125;</div><div class=\"line\">/** </div><div class=\"line\">  * 根据手机的分辨率从 px(像素) 的单位 转成为 dp </div><div class=\"line\">  */</div><div class=\"line\">public static int px2dip(Context context, float pxValue) &#123;  </div><div class=\"line\">    final float scale =context.getResources().getDisplayMetrics().density;  </div><div class=\"line\">        return (int) (pxValue / scale + 0.5f);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.拼接成HTML并加载到webView</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">blog.loadDataWithBaseURL(&quot;&quot;,start+header+data.get(0).getContent()+end, &quot;text/html&quot;, &quot;utf-8&quot;,&quot;&quot;);</div></pre></td></tr></table></figure>\n<p>4.到此成功适配宽度</p>\n<p><img src=\"http://onghqryqs.bkt.clouddn.com/Screenshot_2017-03-28-13-13-06.png?imageView2/0/q/75|watermark/2/text/WXVNZW5nU2h1YWlfQmxvZw==/font/5qW35L2T/fontsize/600/fill/I0QzRDBEMA==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim\" alt=\"\"></p>\n","comments":true,"link":"","tags":[{"name":"Android","slug":"Android","permalink":"https://yumengshuaii.github.io/tags/Android/"}]}]